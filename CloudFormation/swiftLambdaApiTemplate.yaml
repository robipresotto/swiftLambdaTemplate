AWSTemplateFormatVersion: 2010-09-09
Parameters:
  RolesStack:
    Type: String
    Default: SwiftLambdaApiRoles
  HandlerCodeS3Bucket:
    Type: String
    Default: SwiftLambdaFunctions
  HandlerCodeS3Key:
    Type: String
    Default: SwiftLambda.zip
  LambdaFnS3Bucket:
    Type: String
    Default: SwiftLambdaFunctions
  LambdaResources:
    Type: CommaDelimitedList
    Default: '*'
    Description: >-
      Lambda resources
      (arn:aws:lambda:us-west-2:aws-account-number:function:my-function) in the
      form of a comma separated string that this api will need to invoke.
      Defaults to * but should be updated once the lambda(s) is/are created.
  ApiId:
    Type: String
    Default: '*'
    Description: >-
      Enter the id of the api you wish to control with this role. Defaults to *,
      but should be updated once api is created.
Resources:
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaBasicAccessRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: AmazonS3GetObject
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaFnS3Bucket}/'
                  - !Sub 'arn:aws:s3:::${LambdaFnS3Bucket}/*'
  ApiGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ApiGatewayFullAccessRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AWSApiGateWay
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !Ref LambdaResources
        - PolicyName: ApiGatewayFullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                Resource:
                  - !Sub 'arn:aws:apigateway:us-east-1::/restapis/${ApiId}/stages'
                  - !Sub 'arn:aws:apigateway:us-east-1::/restapis/${ApiId}/stages/*'
  SwiftLambdaHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SwiftLambdaHandler
      Handler: function.handler
      Role: !ImportValue
        'Fn::Sub': '${RolesStack}-LambdaRoleArn'
      Code:
        S3Bucket: !Ref HandlerCodeS3Bucket
        S3Key: !Ref HandlerCodeS3Key
      Runtime: provided
      Timeout: 300
  SwiftLambdaApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: SwiftLambdaApi
      Description: API used for practice
      FailOnWarnings: true
  RootGet:
    Type: 'AWS::ApiGateway::Method'
    DependsOn:
      - SwiftLambdaApi
    Properties:
      RestApiId: !Ref SwiftLambdaApi
      ResourceId: !GetAtt
        - SwiftLambdaApi
        - RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Credentials: !ImportValue
          'Fn::Sub': '${RolesStack}-ApiGatewayRoleArn'
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - SwiftLambdaHandler
              - Arn
            - /invocations
  Deployment:
    DependsOn:
      - SwiftLambdaApi
      - RootGet
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref SwiftLambdaApi
  Stage:
    DependsOn:
      - SwiftLambdaApi
      - Deployment
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: dev
      RestApiId: !Ref SwiftLambdaApi
      DeploymentId: !Ref Deployment
Outputs:
  LambdaRole:
    Description: 'Basic Lambda Role Arn: cloudwatch and s3 access'
    Value: !GetAtt
      - LambdaRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRoleArn'
  ApiGatewayRole:
    Description: 'Apigateway Role Arn: full apigateway and invoke lambda access'
    Value: !GetAtt
      - ApiGatewayRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayRoleArn'
